"use strict";(self.webpackChunkkaito_website=self.webpackChunkkaito_website||[]).push([[459],{3882:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/tilt-262872205e2ca6ef17217a60ed1475f0.png"},6564:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=n(4848),s=n(8453);const r={title:"Contributing"},o=void 0,l={id:"contributing",title:"Contributing",description:"This project welcomes contributions and suggestions.",source:"@site/docs/contributing.md",sourceDirName:".",slug:"/contributing",permalink:"/kaito/docs/contributing",draft:!1,unlisted:!1,editUrl:"https://github.com/kaito-project/kaito/tree/main/website/docs/contributing.md",tags:[],version:"current",frontMatter:{title:"Contributing"},sidebar:"sidebar",previous:{title:"Bring Your Own GPU Nodes",permalink:"/kaito/docs/kaito-on-byo-gpu-nodes"},next:{title:"Preset onboarding",permalink:"/kaito/docs/preset-onboarding"}},a={},c=[{value:"Development",id:"development",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Getting Started",id:"getting-started",level:3},{value:"1. Fork and Clone the Repository",id:"1-fork-and-clone-the-repository",level:4},{value:"2. Create <code>tilt-settings.yaml</code>",id:"2-create-tilt-settingsyaml",level:4},{value:"3. Start Tilt",id:"3-start-tilt",level:4}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:r}=t;return r||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"This project welcomes contributions and suggestions."}),"\n",(0,i.jsxs)(t.p,{children:["KAITO has adopted the ",(0,i.jsx)(t.a,{href:"https://github.com/cncf/foundation/blob/main/code-of-conduct.md",children:"Cloud Native Compute Foundation Code of Conduct"}),". For more information see the ",(0,i.jsx)(t.a,{href:"https://github.com/kaito-project/kaito/blob/main/CODE_OF_CONDUCT.md",children:"KAITO Code of Conduct"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"development",children:"Development"}),"\n",(0,i.jsx)(t.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://go.dev/doc/install",children:"Go 1.24"})," or later"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://tilt.dev/",children:"Tilt"})," for rapid, local development"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://docs.docker.com/get-started/get-docker/",children:"Docker"})," for building container images"]}),"\n",(0,i.jsx)(t.li,{children:"Kubernetes cluster with Karpenter supported (e.g. AKS, EKS)"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsx)(t.h4,{id:"1-fork-and-clone-the-repository",children:"1. Fork and Clone the Repository"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git clone git@github.com:<username>/kaito.git\ncd kaito\n"})}),"\n",(0,i.jsxs)(t.h4,{id:"2-create-tilt-settingsyaml",children:["2. Create ",(0,i.jsx)(t.code,{children:"tilt-settings.yaml"})]}),"\n",(0,i.jsx)(t.p,{children:"Tilt streamlines Kubernetes development by automating image builds, deployments, and live updates. Instead of manually building and pushing images to a registry, Tilt handles this process and hot-reloads changes (Go binaries and CRD YAML files) in real-time."}),"\n",(0,i.jsx)(t.p,{children:"To configure Tilt, create a tilt-settings.yaml file in the repository root:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"cat <<EOF > tilt-settings.yaml\ndefault_registry: <acr_name>.azurecr.io\nallowed_contexts:\n  - <context_name>\ncluster_name: <cluster_name>\nEOF\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"default_registry"}),": The container registry where Tilt pushes development images (e.g. ",(0,i.jsx)(t.code,{children:"<acr_name>.azurecr.io"}),"). Ensure you're logged in with ",(0,i.jsx)(t.code,{children:"docker login"})," and have push/pull permissions.\nif you want to use Azure Container Registry (ACR), set up a new ACR instance and attach it to your AKS cluster with these commands:"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"export ACR_NAME=<acr_name>\nexport RESOURCE_GROUP=<resource_group>\nexport CLUSTER_NAME=<cluster_name>\n\naz acr -n $ACR_NAME create --resource-group $RESOURCE_GROUP --sku Basic\naz acr login -n $ACR_NAME\naz aks update -n $CLUSTER_NAME -g $RESOURCE_GROUP --attach-acr $ACR_NAME\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"allowed_contexts"}),": The Kubernetes contexts Tilt is permitted to use. List your available contexts with ",(0,i.jsx)(t.code,{children:"kubectl config get-contexts"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"cluster_name"}),": The name of your Kubernetes cluster. If omitted, Tilt defaults to your current kubectl context."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"3-start-tilt",children:"3. Start Tilt"}),"\n",(0,i.jsx)(t.p,{children:"To start Tilt, run the following command in the root of the repository:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"tilt up\n"})}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Example Output"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"Tilt started on http://localhost:10350/\nv0.34.0, built 2025-03-11\n\n(space) to open the browser\n(s) to stream logs (--stream=true)\n(t) to open legacy terminal mode (--legacy=true)\n(ctrl-c) to exit\nOpening browser: http://localhost:10350/\n"})})]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Tilt UI",src:n(3882).A+"",width:"1686",height:"1259"})}),"\n",(0,i.jsxs)(t.p,{children:["Tilt automates the following steps during ",(0,i.jsx)(t.code,{children:"tilt up"}),":"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Start the Tilt Server"}),": Runs locally at ",(0,i.jsx)(t.a,{href:"http://localhost:10350/",children:"http://localhost:10350/"})," and opens the Tilt UI in your browser (press space)."]}),"\n"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Generate and Build"}),": Creates CRD YAML files (",(0,i.jsx)(t.code,{children:"make generate manifests"}),") and compiles the controller manager Go binary (",(0,i.jsx)(t.code,{children:"go build"}),"), saving it to ",(0,i.jsx)(t.code,{children:"./tilt_bin"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Build Development Image"}),": Packages the binary into a container image and tag it with ",(0,i.jsx)(t.code,{children:"<default_registry>/kaito/workspace:tilt-<hash>"}),"), then pushes it to your container registry."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Apply CRDs"}),": Deploys CRDs to the cluster with ",(0,i.jsx)(t.code,{children:"kubectl apply --server-side -f charts/kaito/crds/"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Deploy Resources"}),": Renders the Helm chart (",(0,i.jsx)(t.code,{children:"helm template charts/kaito/workspace"}),") and applies it to the cluster, including the controller manager, webhooks, RBAC, and NVIDIA device plugin resources."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Live Updates"}),": Detects changes to the controller manager source code, rebuilds the binary, updates the container, and restarts the controller manager within the container without re-deploying the pod - all in ~30 seconds."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var i=n(6540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);