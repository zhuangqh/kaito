"use strict";(self.webpackChunkkaito_website=self.webpackChunkkaito_website||[]).push([[865],{65:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/kaito_workspace_tuning_phi_3_with_pvc_volume-4c0fcc828cd0fb8c08f668dfc71e4a8e.yaml"},725:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/kaito_workspace_tuning_phi_3-c7466283a579f5803bbbfea8f46c3ea6.yaml"},970:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/lora-params-0cfa0fae4754eb50d06ad52099a977aa.yaml"},5635:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/qlora-params-399f6a34e5560e90de9415aa482b759e.yaml"},7649:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var i=t(4848),a=t(8453);const s={title:"Fine Tuning"},r=void 0,o={id:"tuning",title:"Fine Tuning",description:"This document presents how to use the KAITO workspace Custom Resource Definition (CRD) for parameter-efficient fine-tuning (PEFT) of models, how a Kubernetes job is designed to automate the tuning workflow, and several best practices for troubleshooting.",source:"@site/docs/tuning.md",sourceDirName:".",slug:"/tuning",permalink:"/kaito/docs/tuning",draft:!1,unlisted:!1,editUrl:"https://github.com/kaito-project/kaito/tree/main/website/docs/tuning.md",tags:[],version:"current",frontMatter:{title:"Fine Tuning"},sidebar:"sidebar",previous:{title:"Inference",permalink:"/kaito/docs/inference"},next:{title:"Retrieval-Augmented Generation (RAG)",permalink:"/kaito/docs/rag"}},c={},l=[{value:"Usage",id:"usage",level:2},{value:"Tuning workspace",id:"tuning-workspace",level:3},{value:"Tuning configurations",id:"tuning-configurations",level:3},{value:"Tuning configmaps",id:"tuning-configmaps",level:2},{value:"Categorized key parameters",id:"categorized-key-parameters",level:3},{value:"Input dataset format",id:"input-dataset-format",level:2},{value:"Pod structure when input and output are specified as URLs or images",id:"pod-structure-when-input-and-output-are-specified-as-urls-or-images",level:2},{value:"Pod structure when input and output are specified as Kubernetes volumes",id:"pod-structure-when-input-and-output-are-specified-as-kubernetes-volumes",level:2},{value:"Job pod failures",id:"job-pod-failures",level:3},{value:"LoraConfig target modules errors",id:"loraconfig-target-modules-errors",level:3},{value:"Time for job completion",id:"time-for-job-completion",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["This document presents how to use the KAITO ",(0,i.jsx)(n.code,{children:"workspace"})," Custom Resource Definition (CRD) for parameter-efficient fine-tuning (PEFT) of models, how a Kubernetes job is designed to automate the tuning workflow, and several best practices for troubleshooting."]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["KAITO tuning APIs allow users to specify supported tuning methods like ",(0,i.jsx)(n.a,{href:"https://huggingface.co/docs/peft/main/en/conceptual_guides/lora",children:"LoRA or QLoRA"}),", the input dataset and configuration settings, and the output destination for saving the tuning results. Currently, KAITO supports URL, image\nand Kubernetes volume as the types of tuning input sources, and image, Kubernetes volume as the types of tuning output destination."]}),"\n",(0,i.jsx)(n.h3,{id:"tuning-workspace",children:"Tuning workspace"}),"\n",(0,i.jsx)(n.p,{children:"Here are two examples of using KAITO workspace CRD to define workspaces for tuning different models:"}),"\n",(0,i.jsxs)(n.p,{children:["Example 1: Tuning ",(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(725).A+"",children:(0,i.jsx)(n.code,{children:"phi-3-mini"})}),". This example uses a public dataset specified by a URL in the input."]}),"\n",(0,i.jsxs)(n.p,{children:["Example 2: Tuning ",(0,i.jsx)(n.code,{children:"falcon-7b"}),". This example shows how to use an image as the source of input data."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: kaito.sh/v1beta1\nkind: Workspace\nmetadata:\n  name: workspace-tuning-falcon\nresource:\n  instanceType: "Standard_NC24ads_A100_v4"\n  labelSelector:\n    matchLabels:\n      app: tuning-falcon\ntuning:\n  preset:\n    name: falcon-7b\n  method: qlora\n  input:\n    image: PULLREGISTRY/DATA_NAME_HERE:0.0.1\n    imagePullSecrets:\n      - IMAGE_PULL_SECRETS_HERE\n  output:\n    image: PUSHREGISTRY/ADAPTER_NAME_HERE:0.0.1  # Tuning Output\n    imagePushSecret: IMAGE_PUSH_SECRET_HERE\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Example 3: Tuning ",(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(65).A+"",children:(0,i.jsx)(n.code,{children:"phi-3-mini"})}),". This example shows how to use a Kubernetes volume as the source of input dataset and output destination. We use AzureFile as an example, but any other supported volume type can be used. You should save your input dataset in the volume before creating the workspace, and the output adapter will be saved in the output volume after the tuning job is completed."]}),"\n",(0,i.jsxs)(n.p,{children:["The detailed ",(0,i.jsx)(n.code,{children:"TuningSpec"})," API definitions can be found ",(0,i.jsx)(n.a,{href:"https://github.com/kaito-project/kaito/blob/2ccc93daf9d5385649f3f219ff131ee7c9c47f3e/api/v1alpha1/workspace_types.go#L145",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"tuning-configurations",children:"Tuning configurations"}),"\n",(0,i.jsx)(n.p,{children:"KAITO provides default tuning configurations for different tuning methods. They are managed by Kubernetes configmaps."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(970).A+"",children:"default LoRA configmap"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(5635).A+"",children:"default QLoRA configmap"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"tuning-configmaps",children:"Tuning configmaps"}),"\n",(0,i.jsxs)(n.p,{children:["User can specify a customized configmap via the ",(0,i.jsx)(n.code,{children:"Config"})," field of the ",(0,i.jsx)(n.code,{children:"TuningSpec"}),". The customized configmap should be structured based on the default configmaps provided by KAITO. Please read the following section carefully when attempting to change the default parameters used by KAITO."]}),"\n",(0,i.jsx)(n.h3,{id:"categorized-key-parameters",children:"Categorized key parameters"}),"\n",(0,i.jsx)(n.p,{children:"Note that changing these parameters may largely impact the tuning result. In addition, users can add extra parameters that are not presented in the default configmaps. For a complete list of supported parameters, please refer to the provided huggingface documentation."}),"\n",(0,i.jsxs)(n.p,{children:["ModelConfig(",(0,i.jsx)(n.a,{href:"https://huggingface.co/docs/transformers/v4.40.2/en/model_doc/auto#transformers.AutoModelForCausalLM.from_pretrained",children:"full list"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'torch_dtype: Specifies the data type for PyTorch tensors, e.g., "bfloat16".'}),"\n",(0,i.jsx)(n.li,{children:"local_files_only: Indicates whether to only use local files."}),"\n",(0,i.jsx)(n.li,{children:'device_map: Configures device mapping for the model, typically "auto".'}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["QuantizationConfig(",(0,i.jsx)(n.a,{href:"https://huggingface.co/docs/transformers/v4.40.2/en/main_classes/quantization#transformers.BitsAndBytesConfig",children:"full list"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"load_in_4bit: Enables loading the model with 4-bit precision."}),"\n",(0,i.jsx)(n.li,{children:'bnb_4bit_quant_type: Specifies the type of 4-bit quantization, e.g., "nf4".'}),"\n",(0,i.jsx)(n.li,{children:'bnb_4bit_compute_dtype: Data type for computation, e.g., "bfloat16".'}),"\n",(0,i.jsx)(n.li,{children:"bnb_4bit_use_double_quant: Enables double quantization."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["LoraConfig(",(0,i.jsx)(n.a,{href:"https://huggingface.co/docs/peft/v0.8.2/en/package_reference/lora#peft.LoraConfig",children:"full list"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"r"}),": Rank of the low-rank matrices used in LoRA."]}),"\n",(0,i.jsx)(n.li,{children:"lora_alpha: Scaling factor for LoRA."}),"\n",(0,i.jsx)(n.li,{children:"lora_dropout: Dropout rate for LoRA layers."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["TrainingArguments(",(0,i.jsx)(n.a,{href:"https://huggingface.co/docs/transformers/v4.40.2/en/main_classes/trainer#transformers.TrainingArguments",children:"full list"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ddp_find_unused_parameters: Flag to handle unused parameters during distributed training."}),"\n",(0,i.jsx)(n.li,{children:'save_strategy: Strategy for saving checkpoints, e.g., "epoch".'}),"\n",(0,i.jsx)(n.li,{children:"per_device_train_batch_size: Batch size per device during training."}),"\n",(0,i.jsx)(n.li,{children:"num_train_epochs: Total number of training epochs to perform, defaults to 3.0."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["DataCollator(",(0,i.jsx)(n.a,{href:"https://huggingface.co/docs/transformers/v4.40.2/en/main_classes/data_collator#transformers.DataCollatorForLanguageModeling",children:"full list"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"mlm: Masked language modeling flag."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["DatasetConfig(",(0,i.jsx)(n.a,{href:"https://github.com/kaito-project/kaito/blob/main/presets/workspace/tuning/text-generation/cli.py#L44",children:"full list"}),")"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"shuffle_dataset: Whether to shuffle the dataset."}),"\n",(0,i.jsx)(n.li,{children:"train_test_split: Proportion of data used for training, typically set to 1 for using all data."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"input-dataset-format",children:"Input dataset format"}),"\n",(0,i.jsx)(n.p,{children:"The input dataset for fine-tuning should follow specific formats defined in the HuggingFace trainer library. Supported formats include conversational and instruction formats."}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.a,{href:"https://huggingface.co/datasets/philschmid/dolly-15k-oai-style/tree/main",children:"HuggingFace Dolly 15k OAI-style dataset"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Conversational format","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "messages": [\n    {"role": "system", "content": "Marv is a factual chatbot that is also sarcastic."},\n    {"role": "user", "content": "What\'s the capital of France?"},\n    {"role": "assistant", "content": "Paris, as if everyone doesn\'t know that already."}\n  ]\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.a,{href:"https://huggingface.co/datasets/HuggingFaceH4/instruction-dataset/tree/main",children:"HuggingFace Instruction Dataset"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Instruction format","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{"prompt": "<prompt text>", "completion": "<ideal generated text>"}\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If your dataset is not in one of these formats, it will be passed directly to the training library (",(0,i.jsx)(n.a,{href:"https://huggingface.co/docs/trl/en/sft_trainer",children:"SFTTrainer"}),") without any preprocessing. This may result in undefined behavior if the dataset does not align with the trainer's expected input structure. To ensure proper functionality, you may need to preprocess the dataset to match one of the supported formats. For more details, please refer to this ",(0,i.jsx)(n.a,{href:"https://huggingface.co/docs/trl/v0.9.4/sft_trainer#dataset-format-support",children:"documentation"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Note: if you build a container image for the input dataset, please copy the dataset to the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"/data"})})," directory inside the container."]}),"\n",(0,i.jsx)(n.h1,{id:"tuning-job",children:"Tuning Job"}),"\n",(0,i.jsxs)(n.p,{children:["KAITO uses the Kubernetes ",(0,i.jsx)(n.strong,{children:"batchv1.job"})," workload to manage the tuning Pod. When a tuning workspace custom resource is created, the KAITO controller will create a job with the same name as the workspace in the same namespace. The pod structure will be different depending on whether the input and output are specified as URLs, images, or Kubernetes volumes."]}),"\n",(0,i.jsx)(n.h2,{id:"pod-structure-when-input-and-output-are-specified-as-urls-or-images",children:"Pod structure when input and output are specified as URLs or images"}),"\n",(0,i.jsx)(n.p,{children:"To streamline the tuning workflow, KAITO adds two containers in addition to the main container that runs the tuning process. The pod structure is illustrated in Figure 1."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"KAITO fine tuning",src:t(9648).A+"",width:"1133",height:"1375"})}),"\n",(0,i.jsx)(n.p,{children:"Figure 1. KAITO tuning pod structure."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Initcontainer ",(0,i.jsx)(n.code,{children:"data-downloader"}),": It downloads the training input dataset from the URLs specified in the tuning spec if needed. If an image is specified in the input, the ",(0,i.jsx)(n.code,{children:"data-downloader"})," container uses the specified image as the container image. This initcontainer ensures the training data is available locally before the training process starts."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Sidecar container: It is introduced to support automatically pushing the tuning results to a container registry. This container, with ",(0,i.jsx)(n.code,{children:"docker"})," installed, runs a script to periodically check the training progress. Once the training is done, indicated by a sentinel file created by the training process, the script builds a container image containing the training results and pushes the image to the specified container registry."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Main container: It uses one of the supported model images. The image entry launches the ",(0,i.jsx)(n.a,{href:"https://github.com/kaito-project/kaito/blob/main/presets/workspace/tuning/text-generation/fine_tuning.py",children:"fine_tuning.py"})," script."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["All three containers use shared local volumes (by mounting the same ",(0,i.jsx)(n.code,{children:"EmptyDir"})," volumes), hence file copies between containers are avoided."]}),"\n",(0,i.jsx)(n.h2,{id:"pod-structure-when-input-and-output-are-specified-as-kubernetes-volumes",children:"Pod structure when input and output are specified as Kubernetes volumes"}),"\n",(0,i.jsx)(n.p,{children:"When the input and output are specified as Kubernetes volumes, the initcontainer and sidecar container are removed and only the main container is used. Since the input dataset and ouput destination are already available in the specified volumes, the main container can directly access them."}),"\n",(0,i.jsx)(n.p,{children:"Other than the absence of the init and sidecar containers, the main container is the same as described in the previous section."}),"\n",(0,i.jsx)(n.h1,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"job-pod-failures",children:"Job pod failures"}),"\n",(0,i.jsxs)(n.p,{children:["When the tuning job reaches the failed state, at least one of the above three containers has encountered errors. Users can check the logs of these containers using the ",(0,i.jsx)(n.code,{children:"kubectl logs PODNAME -n NAMESPACE -c CONTAINERNAME"})," command."]}),"\n",(0,i.jsx)(n.p,{children:"For the initcontainer and sidecar container, possible errors include invalid input/output URLs or invalid image pull secrets. Users can fix these problems by updating the workspace custom resource with corrections. The KAITO controller will create a new job using the updated spec."}),"\n",(0,i.jsx)(n.p,{children:"For the main container, errors may occur when CUDA reports out of GPU memory. Users should reduce the batch size (the default is 1) if it has been customized to a value larger than 1. If the batch size is already 1, the workspace must be recreated using a different GPU SKU with larger GPU memory. Note that KAITO has optimized the training memory usage by dropping the preallocated memory cache. Our internal tests show that the performance impact due to this change is negligible."}),"\n",(0,i.jsx)(n.h3,{id:"loraconfig-target-modules-errors",children:"LoraConfig target modules errors"}),"\n",(0,i.jsxs)(n.p,{children:["If you encounter the error: ",(0,i.jsx)(n.code,{children:"ValueError: Target modules {'target_module_here'} not found in the base model. Please check the target modules and try again."}),", you need to manually specify the target_modules parameter in your KAITO configmap. This is a huggingface requirement."]}),"\n",(0,i.jsx)(n.p,{children:"This error occurs because the automatic module detection failed for your model. You must identify the specific target modules for your model and explicitly list them in the LoraConfig section. For example, a valid configuration for phi-4-mini-instruct would look like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'LoraConfig: # Configurable Parameters: https://huggingface.co/docs/peft/v0.8.2/en/package_reference/lora#peft.LoraConfig\n    r: 8\n    lora_alpha: 8\n    lora_dropout: 0.0\n    target_modules: ["qkv_proj", "o_proj"]\n'})}),"\n",(0,i.jsx)(n.p,{children:'You can find valid module names by checking the "Files info" tab on the model card on Huggingface and examining the model.safetensors.index.json file.'}),"\n",(0,i.jsxs)(n.p,{children:["For more information on target_modules configuration, see the official ",(0,i.jsx)(n.a,{href:"https://huggingface.co/docs/peft/en/package_reference/lora#peft.LoraConfig.target_modules",children:"PEFT documentation"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"time-for-job-completion",children:"Time for job completion"}),"\n",(0,i.jsx)(n.p,{children:"The training job can take a long time depending on the size of the input dataset and training pipeline configurations. The total training time is largely determined by the total number of training steps, calculated as:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"total steps = number of epochs * (number of samples in dataset / batch size)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["where ",(0,i.jsx)(n.code,{children:"number of epochs"})," and ",(0,i.jsx)(n.code,{children:"batch size"})," can be customized in the tuning configmap. However, if the ",(0,i.jsx)(n.code,{children:"max_steps"})," parameter is also specified in the configmap, training will stop after reaching the max steps, even if the specified epochs have not been completed. Users can track the tuning progress in the job pod's log, reported by the number of steps completed out of the total."]}),"\n",(0,i.jsx)(n.p,{children:"Please file issues if you experience abnormal slowness of the training job."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},9648:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/kaito-fine-tuning-79536b59d7d08c9b70ae4f4f0f05ff02.png"}}]);